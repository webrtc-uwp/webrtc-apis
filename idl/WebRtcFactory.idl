/*

 Copyright (c) 2017, Optical Tone Ltd.
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
 list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
 this list of conditions and the following disclaimer in the documentation
 and/or other materials provided with the distribution.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 The views and conclusions contained in the software and documentation are those
 of the authors and should not be interpreted as representing official policies,
 either expressed or implied, of the FreeBSD Project.
 
 */


namespace org
{
  namespace webRtc
  {
    /// <summary>
    /// The event is fired when an audio buffer is ready for processing.
    /// <summary>
    [disposable]
    interface AudioBufferEvent
    {
      [constructor, delete, default]
      void AudioBufferEvent();

      /// <summary>
      /// Gets the audio buffer for further processing. All audio
      /// manipulation performed on the audio buffer MUST be complete prior
      /// to disposing of the AudioBufferEvent. Once the event is disposed
      /// changes to the audio buffer will become finalized.
      /// <summary>
      [getter]
      AudioBuffer buffer;
    };

    /// <summary>
    /// The event is fired when an audio buffer needs to be reset.
    /// <summary>
    [disposable]
    interface AudioProcessingInitializeEvent
    {
      [constructor, delete, default]
      void AudioProcessingInitializeEvent();

      /// <summary>
      /// Gets the audio sample hz rate.
      /// <summary>
      [getter]
      size_t samplRateHz;

      /// <summary>
      /// Gets the total number of channels.
      /// <summary>
      [getter]
      size_t channels;
    };

    /// <summary>
    /// The event is fired when an audio buffer needs to be reset.
    /// <summary>
    [disposable]
    interface AudioProcessingRuntimeSettingEvent
    {
      [constructor, delete, default]
      void AudioProcessingRuntimeSettingEvent();

      [getter]
      RuntimeSetting type;

      [getter]
      float value;
    };

    /// <summary>
    /// The WebRtcFactoryConfiguration contains the boot strapping
    /// configuration options for the WebRtcFactory.
    /// </summary>
    [dictionary]
    struct WebRtcFactoryConfiguration
    {

      /// <summary>
      /// Gets or sets if audio capturing is enabled.
      /// </summary>
      bool audioCapturingEnabled = true;

      /// <summary>
      /// Gets or sets if audio rendering is enabled.
      /// </summary>
      bool audioRenderingEnabled = true;
	  
      /// <summary>
      /// Gets or sets Device ID of used audio capture device.
      /// </summary>
	  string audioCaptureDeviceId;
	  
      /// <summary>
      /// Gets or sets Device ID of used audio render device.
      /// </summary>
	  string audioRenderDeviceId;

      /// <summary>
      /// Gets or sets if audio post-capture and pre-render events should be
      /// enabled.
      /// </summary>
      bool enableAudioBufferEvents = false;

      /// <summary>
      /// Gets or sets if a custom factory should be used for capturering.
      /// </summary>
      CustomAudioDevice customAudioDevice;

      /// <summary>
      /// Gets or sets if a custom factory should be used for capturering.
      /// </summary>
      CustomVideoCapturerFactory customVideoFactory;

      /// <summary>
      /// Gets or sets the custom audio mixer.
      /// Must contain a pointer to a native webrtc::AudioMixer (0 if null).
      /// Pass as an integer since void* is not supported by the IDL parser.
      /// </summary>
      uint64 customAudioMixer;
    };

    /// <summary>
    /// The WebRtcFactory is the boot strapping object
    /// for all objects related to the an instance of WebRtc.
    /// </summary>
    [disposable]
    interface WebRtcFactory
    {
      /// <summary>
      /// Constructs an instance of a webrtc factory given a configuration.
      /// </summary>
      [constructor, default]
      void WebRtcFactory(WebRtcFactoryConfiguration configuration);

      /// <summary>
      /// Setup the factory to ensure the properties of the factory are
      /// fully prepared before attempting to use the factory in the
      /// webrtc core. This method must be called if 
      /// </summary>
      Promise setup();

      /// <summary>
      /// Fires events when capture audio processing is (re-)initialized.
      /// </summary>
      [event]
      void onAudioPostCaptureInitialize(AudioProcessingInitializeEvent event);

      /// <summary>
      /// Fires events when a capture runtime setting have changed.
      /// </summary>
      [event]
      void onAudioPostCaptureRuntimeSetting(AudioProcessingRuntimeSettingEvent event);

      /// <summary>
      /// Fires events when an audio buffer has been captured.
      /// </summary>
      [event]
      void onAudioPostCapture(AudioBufferEvent buffer);

      /// <summary>
      /// Fires events when pre-render audio processing is (re-)initialized.
      /// </summary>
      [event]
      void onAudioPreRenderInitialize(AudioProcessingInitializeEvent event);

      /// <summary>
      /// Fires events when a pre-render runtime setting have changed.
      /// </summary>
      [event]
      void onAudioPreRenderRuntimeSetting(AudioProcessingRuntimeSettingEvent event);

      /// <summary>
      /// Fires events before an audio buffer is about to render.
      /// </summary>
      [event]
      void onAudioPreRender(AudioBufferEvent buffer);

    };
  }
}
