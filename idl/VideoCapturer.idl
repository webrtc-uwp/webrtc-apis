/*

 Copyright (c) 2017, Optical Tone Ltd.
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
 list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
 this list of conditions and the following disclaimer in the documentation
 and/or other materials provided with the distribution.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 The views and conclusions contained in the software and documentation are those
 of the authors and should not be interpreted as representing official policies,
 either expressed or implied, of the FreeBSD Project.
 
 */


namespace org
{
  namespace webRtc
  {
    [special]
    struct VideoDeviceInfo
    {
      [constructor, default, delete]
      void VideoDeviceInfo();

      [getter]
      zs::Any info;
    };
    typedef std::list<VideoDeviceInfo> VideoDeviceInfoList;
    typedef zs::PromiseWith<VideoDeviceInfoList> PromiseWithVideoDeviceInfoList;

    struct VideoFormat
    {
      /// <summary>
      /// Number of pixels.
      /// </summary>
      int width;

      /// <summary>
      /// Number of pixels.
      /// </summary>
      int height;

      /// <summary>
      /// Number of pixels.
      /// </summary>
      Nanoseconds interval;  /// Nanoseconds.

      /// <summary>
      /// Color space. FOURCC_ANY (0xFFFFFFFF) means that any color space is OK.
      /// </summary>
      uint32 fourcc;

      [getter]
      int framerate;

      [getter]
      float framerateFloat;

      [getter]
      bool isSize0x0;

      bool IsPixelRateLess(VideoFormat other);

      [constructor, default]
      void VideoFormat();

      [constructor, default, altname(VideoFormatClone)]
      void VideoFormat(VideoFormat source);
    };

    [dictionary]
    struct VideoCapturerInputSize
    {
      int width;
      int height;
    };

    enum VideoProfileKind
    {
      /// <summary>
      /// Unspecified video profile kind, for no filtering.
      /// </summary>
      unspecified

      // These map 1:1 to values of MediaCapture.KnownVideoProfile (with +1 offset).
      videoRecording,
      highQualityPhoto,
      balancedVideoAndPhoto,
      videoConferencing,
      photoSequence,
      highFrameRate,
      variablePhotoSequence,
      hdrWithWcgVideo,
      hdrWithWcgPhoto,
      videoHdr8,
    };

    [dictionary]
    struct VideoCapturerCreationParameters
    {
      WebRtcFactory factory;
      string name;

      /// <summary>
      /// Video capture device unique ID to use.
      /// </summary>
      string id;

      /// <summary>
      /// Optional unique ID of a video profile to use.
      /// </summary>
      string videoProfileId;

      /// <summary>
      /// Optional video profile kind to use.
      /// </summary>
      VideoProfileKind videoProfileKind;

      /// <summary>
      /// Enable Mixed Reality Capture on supported devices.
      /// </summary>
      bool enableMrc;

      /// <summary>
      /// If Mixed Reality Capture is enabled, enable the recording indicator on screen.
      /// </summary>
      bool enableMrcRecordingIndicator;

      /// <summary>
      /// Optional constraint on width to select a capture media type (resolution + framerate), or zero for default.
      /// </summary>
      int width;

      /// <summary>
      /// Optional constraint on height to select a capture media type (resolution + framerate), or zero for default.
      /// </summary>
      int height;

      /// <summary>
      /// Optional constraint on framerate to select a capture media type (resolution + framerate), or zero for default.
      /// </summary>
      double framerate;
    };

    [disposable]
    interface VideoCapturer
    {
      [constructor, default, delete]
      void VideoCapturer();

      [static]
      VideoCapturer create(VideoCapturerCreationParameters params);

      [static]
      PromiseWithVideoDeviceInfoList getDevices();

      /// <summary>
      /// Get the capture formats supported by the video capturer. The supported
      /// formats are non empty after the device has been opened successfully.
      /// </summary>
      VideoFormats getSupportedFormats();

      /// <summary>
      /// Get the best capture format for the desired format. The best format is the
      /// same as one of the supported formats except that the frame interval may be
      /// different. If the application asks for 16x9 and the camera does not support
      /// 16x9 HD or the application asks for 16x10, we find the closest 4x3 and then
      /// crop; Otherwise, we find what the application asks for. Note that we assume
      /// that for HD, the desired format is always 16x9. The subclasses can override
      /// the default implementation.
      /// Parameters
      ///   desired: the input desired format. If desired.fourcc is not kAnyFourcc,
      ///            the best capture format has the exactly same fourcc. Otherwise,
      ///            the best capture format uses a fourcc in GetPreferredFourccs().
      ///   best_format: the output of the best capture format.
      /// Return false if there is no such a best format, that is, the desired format
      /// is not supported.
      /// </summary>
      VideoFormat getBestCaptureFormat(VideoFormat desired);

      /// <summary>
      /// Start the video capturer with the specified capture format.
      /// Parameter
      ///   captureFormat: The caller got this parameter by either calling
      ///                   GetSupportedFormats() and selecting one of the supported
      ///                   or calling GetBestCaptureFormat().
      /// Return
      ///   starting:  The capturer is trying to start. Success or failure will
      ///              be notified via the onSignalStateChange callback.
      ///   running:   if the capturer is started and capturing.
      ///   failed:    if the capturer failes to start..
      ///   noDevie:   if the capturer has no device and fails to start.
      /// </summary>
      VideoCaptureState start(VideoFormat captureFormat);

      /// <summary>
      /// Get the current capture format, which is set by the Start() call.
      /// Note that the width and height of the captured frames may differ from the
      /// capture format. For example, the capture format is HD but the captured
      /// frames may be smaller than HD.
      /// </summary>
      VideoFormat getCaptureFormat();

      /// <summary>
      /// Stop the video capturer.
      /// </summary>
      void stop();

      /// <summary>
      /// Caps the VideoCapturer's format according to max_format. It can e.g. be
      /// used to prevent cameras from capturing at a resolution or framerate that
      /// the capturer is capable of but not performing satisfactorily at.
      /// The capping is an upper bound for each component of the capturing format.
      /// The fourcc component is ignored.
      /// </summary>
      void constrainSupportedFormats(VideoFormat maxFormat);

      /// <summary>
      /// Gets the id of the underlying device, which is available after the capturer
      /// is initialized. Can be used to determine if two capturers reference the
      /// same device.
      /// </summary>
      [getter]
      string id;

      [getter,setter]
      bool enableCameraList;

      /// <summary>
      /// If true, run video adaptation. By default, video adaptation is enabled
      /// and users must call video_adapter()->OnOutputFormatRequest()
      /// to receive frames.
      /// </summary>
      [getter,setter]
      bool enableVideoAdapter;

      /// <summary>
      /// Check if the video capturer is running.
      /// </summary>
      [getter]
      bool isRunning;

      [getter]
      bool applyRotation;

      /// <summary>
      /// Returns true if the capturer is screencasting. This can be used to
      /// implement screencast specific behavior.
      /// </summary>
      [getter]
      bool isScreencast;

      [getter]
      VideoCapturerInputSize inputSize;

      [getter]
      VideoCaptureState state;

      /// <summary>
      /// Event fires when a new video frame buffer is available.
      /// </summary>
      [event]
      void onVideoFrame(VideoFrameBufferEvent event);
    };
  }
}
